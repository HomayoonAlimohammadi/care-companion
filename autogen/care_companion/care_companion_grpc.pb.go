// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: care_companion.proto

package care_companion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CareCompanion_GetCareSeeker_FullMethodName    = "/care_companion.CareCompanion/GetCareSeeker"
	CareCompanion_CreateCareSeeker_FullMethodName = "/care_companion.CareCompanion/CreateCareSeeker"
	CareCompanion_GetCareSeek_FullMethodName      = "/care_companion.CareCompanion/GetCareSeek"
	CareCompanion_CreateCareSeek_FullMethodName   = "/care_companion.CareCompanion/CreateCareSeek"
	CareCompanion_Ping_FullMethodName             = "/care_companion.CareCompanion/Ping"
)

// CareCompanionClient is the client API for CareCompanion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CareCompanionClient interface {
	GetCareSeeker(ctx context.Context, in *GetCareSeekerRequest, opts ...grpc.CallOption) (*GetCareSeekerResponse, error)
	CreateCareSeeker(ctx context.Context, in *CreateCareSeekerRequest, opts ...grpc.CallOption) (*CreateCareSeekerResponse, error)
	GetCareSeek(ctx context.Context, in *GetCareSeekRequest, opts ...grpc.CallOption) (*GetCareSeekResponse, error)
	CreateCareSeek(ctx context.Context, in *CreateCareSeekRequest, opts ...grpc.CallOption) (*CreateCareSeekResponse, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResponse, error)
}

type careCompanionClient struct {
	cc grpc.ClientConnInterface
}

func NewCareCompanionClient(cc grpc.ClientConnInterface) CareCompanionClient {
	return &careCompanionClient{cc}
}

func (c *careCompanionClient) GetCareSeeker(ctx context.Context, in *GetCareSeekerRequest, opts ...grpc.CallOption) (*GetCareSeekerResponse, error) {
	out := new(GetCareSeekerResponse)
	err := c.cc.Invoke(ctx, CareCompanion_GetCareSeeker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careCompanionClient) CreateCareSeeker(ctx context.Context, in *CreateCareSeekerRequest, opts ...grpc.CallOption) (*CreateCareSeekerResponse, error) {
	out := new(CreateCareSeekerResponse)
	err := c.cc.Invoke(ctx, CareCompanion_CreateCareSeeker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careCompanionClient) GetCareSeek(ctx context.Context, in *GetCareSeekRequest, opts ...grpc.CallOption) (*GetCareSeekResponse, error) {
	out := new(GetCareSeekResponse)
	err := c.cc.Invoke(ctx, CareCompanion_GetCareSeek_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careCompanionClient) CreateCareSeek(ctx context.Context, in *CreateCareSeekRequest, opts ...grpc.CallOption) (*CreateCareSeekResponse, error) {
	out := new(CreateCareSeekResponse)
	err := c.cc.Invoke(ctx, CareCompanion_CreateCareSeek_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careCompanionClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, CareCompanion_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CareCompanionServer is the server API for CareCompanion service.
// All implementations must embed UnimplementedCareCompanionServer
// for forward compatibility
type CareCompanionServer interface {
	GetCareSeeker(context.Context, *GetCareSeekerRequest) (*GetCareSeekerResponse, error)
	CreateCareSeeker(context.Context, *CreateCareSeekerRequest) (*CreateCareSeekerResponse, error)
	GetCareSeek(context.Context, *GetCareSeekRequest) (*GetCareSeekResponse, error)
	CreateCareSeek(context.Context, *CreateCareSeekRequest) (*CreateCareSeekResponse, error)
	Ping(context.Context, *Empty) (*PingResponse, error)
	mustEmbedUnimplementedCareCompanionServer()
}

// UnimplementedCareCompanionServer must be embedded to have forward compatible implementations.
type UnimplementedCareCompanionServer struct {
}

func (UnimplementedCareCompanionServer) GetCareSeeker(context.Context, *GetCareSeekerRequest) (*GetCareSeekerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCareSeeker not implemented")
}
func (UnimplementedCareCompanionServer) CreateCareSeeker(context.Context, *CreateCareSeekerRequest) (*CreateCareSeekerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCareSeeker not implemented")
}
func (UnimplementedCareCompanionServer) GetCareSeek(context.Context, *GetCareSeekRequest) (*GetCareSeekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCareSeek not implemented")
}
func (UnimplementedCareCompanionServer) CreateCareSeek(context.Context, *CreateCareSeekRequest) (*CreateCareSeekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCareSeek not implemented")
}
func (UnimplementedCareCompanionServer) Ping(context.Context, *Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCareCompanionServer) mustEmbedUnimplementedCareCompanionServer() {}

// UnsafeCareCompanionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CareCompanionServer will
// result in compilation errors.
type UnsafeCareCompanionServer interface {
	mustEmbedUnimplementedCareCompanionServer()
}

func RegisterCareCompanionServer(s grpc.ServiceRegistrar, srv CareCompanionServer) {
	s.RegisterService(&CareCompanion_ServiceDesc, srv)
}

func _CareCompanion_GetCareSeeker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCareSeekerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareCompanionServer).GetCareSeeker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CareCompanion_GetCareSeeker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareCompanionServer).GetCareSeeker(ctx, req.(*GetCareSeekerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CareCompanion_CreateCareSeeker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCareSeekerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareCompanionServer).CreateCareSeeker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CareCompanion_CreateCareSeeker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareCompanionServer).CreateCareSeeker(ctx, req.(*CreateCareSeekerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CareCompanion_GetCareSeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCareSeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareCompanionServer).GetCareSeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CareCompanion_GetCareSeek_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareCompanionServer).GetCareSeek(ctx, req.(*GetCareSeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CareCompanion_CreateCareSeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCareSeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareCompanionServer).CreateCareSeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CareCompanion_CreateCareSeek_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareCompanionServer).CreateCareSeek(ctx, req.(*CreateCareSeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CareCompanion_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareCompanionServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CareCompanion_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareCompanionServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CareCompanion_ServiceDesc is the grpc.ServiceDesc for CareCompanion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CareCompanion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "care_companion.CareCompanion",
	HandlerType: (*CareCompanionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCareSeeker",
			Handler:    _CareCompanion_GetCareSeeker_Handler,
		},
		{
			MethodName: "CreateCareSeeker",
			Handler:    _CareCompanion_CreateCareSeeker_Handler,
		},
		{
			MethodName: "GetCareSeek",
			Handler:    _CareCompanion_GetCareSeek_Handler,
		},
		{
			MethodName: "CreateCareSeek",
			Handler:    _CareCompanion_CreateCareSeek_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _CareCompanion_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "care_companion.proto",
}
